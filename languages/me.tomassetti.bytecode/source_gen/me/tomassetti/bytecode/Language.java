package me.tomassetti.bytecode;

/*Generated by MPS */

import jetbrains.mps.smodel.language.LanguageRuntime;
import jetbrains.mps.smodel.adapter.ids.SLanguageId;
import java.util.UUID;
import java.util.Collection;
import jetbrains.mps.generator.runtime.TemplateModule;
import jetbrains.mps.generator.runtime.TemplateUtil;
import jetbrains.mps.smodel.runtime.ILanguageAspect;
import jetbrains.mps.smodel.runtime.BehaviorAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsAspectDescriptor;
import jetbrains.mps.openapi.editor.descriptor.EditorAspectDescriptor;
import me.tomassetti.bytecode.editor.EditorAspectDescriptorImpl;
import jetbrains.mps.smodel.runtime.MakeAspectDescriptor;
import me.tomassetti.bytecode.plugin.FacetAspectDescriptor;
import jetbrains.mps.smodel.runtime.StructureAspectDescriptor;

public class Language extends LanguageRuntime {
  public static String MODULE_REF = "1392eb99-581d-482b-aa28-19e40eaffbe2(me.tomassetti.bytecode)";
  public Language() {
  }
  @Override
  public String getNamespace() {
    return "me.tomassetti.bytecode";
  }

  @Override
  public int getVersion() {
    return 0;
  }

  public SLanguageId getId() {
    return new SLanguageId(UUID.fromString("1392eb99-581d-482b-aa28-19e40eaffbe2"));
  }
  @Override
  protected String[] getExtendedLanguageIDs() {
    return new String[]{};
  }
  @Override
  public Collection<TemplateModule> getGenerators() {
    return TemplateUtil.<TemplateModule>asCollection(TemplateUtil.createInterpretedGenerator(this, "fa455b1a-4bc7-4ac7-b944-dc066712b750(me.tomassetti.bytecode#4649981497883958479)"));
  }
  @Override
  protected <T extends ILanguageAspect> T createAspect(Class<T> aspectClass) {
    if (aspectClass == BehaviorAspectDescriptor.class) {
      return (T) new me.tomassetti.bytecode.behavior.BehaviorAspectDescriptor();
    }
    if (aspectClass == ConstraintsAspectDescriptor.class) {
      return (T) new me.tomassetti.bytecode.constraints.ConstraintsAspectDescriptor();
    }
    if (aspectClass == EditorAspectDescriptor.class) {
      return (T) new EditorAspectDescriptorImpl();
    }
    if (aspectClass == MakeAspectDescriptor.class) {
      return (T) new FacetAspectDescriptor();
    }
    if (aspectClass == StructureAspectDescriptor.class) {
      return (T) new me.tomassetti.bytecode.structure.StructureAspectDescriptor();
    }
    return super.createAspect(aspectClass);
  }
}
