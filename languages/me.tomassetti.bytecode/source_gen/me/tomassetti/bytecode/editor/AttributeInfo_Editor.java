package me.tomassetti.bytecode.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cells.EditorCell_Indent;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class AttributeInfo_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_w7w00h_a(editorContext, node);
  }
  private EditorCell createCollection_w7w00h_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_w7w00h_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createConstant_w7w00h_a0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_w7w00h_b0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_w7w00h_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_w7w00h_a0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "attribute info {");
    editorCell.setCellId("Constant_w7w00h_a0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createCollection_w7w00h_b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_w7w00h_b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createIndentCell_w7w00h_a1a(editorContext, node));
    editorCell.addEditorCell(this.createCollection_w7w00h_b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createIndentCell_w7w00h_a1a(EditorContext editorContext, SNode node) {
    EditorCell_Indent editorCell = new EditorCell_Indent(editorContext, node);
    return editorCell;
  }
  private EditorCell createCollection_w7w00h_b1a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_w7w00h_b1a");
    editorCell.setGridLayout(true);
    editorCell.addEditorCell(this.createCollection_w7w00h_a1b0(editorContext, node));
    editorCell.addEditorCell(this.createCollection_w7w00h_b1b0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_w7w00h_a1b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_w7w00h_a1b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_w7w00h_a0b1a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_w7w00h_b0b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_w7w00h_a0b1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "name index");
    editorCell.setCellId("Constant_w7w00h_a0b1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_w7w00h_b0b1a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new AttributeInfo_Editor.nameIndexSingleRoleHandler_w7w00h_b0b1a(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a52669cL, "nameIndex"), editorContext);
    return provider.createCell();
  }
  private class nameIndexSingleRoleHandler_w7w00h_b0b1a extends SingleRoleCellProvider {
    public nameIndexSingleRoleHandler_w7w00h_b0b1a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("nameIndex");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_nameIndex");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no nameIndex>";
    }
  }
  private EditorCell createCollection_w7w00h_b1b0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_w7w00h_b1b0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createConstant_w7w00h_a1b1a(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_w7w00h_b1b1a(editorContext, node));
    return editorCell;
  }
  private EditorCell createConstant_w7w00h_a1b1a(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "data");
    editorCell.setCellId("Constant_w7w00h_a1b1a");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_w7w00h_b1b1a(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new AttributeInfo_Editor.dataSingleRoleHandler_w7w00h_b1b1a(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a534cd2L, "data"), editorContext);
    return provider.createCell();
  }
  private class dataSingleRoleHandler_w7w00h_b1b1a extends SingleRoleCellProvider {
    public dataSingleRoleHandler_w7w00h_b1b1a(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("data");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_data");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no data>";
    }
  }
  private EditorCell createConstant_w7w00h_c0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "}");
    editorCell.setCellId("Constant_w7w00h_c0");
    editorCell.setDefaultText("");
    return editorCell;
  }
}
