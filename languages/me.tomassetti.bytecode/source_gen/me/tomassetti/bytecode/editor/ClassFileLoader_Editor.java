package me.tomassetti.bytecode.editor;

/*Generated by MPS */

import jetbrains.mps.nodeEditor.DefaultNodeEditor;
import jetbrains.mps.openapi.editor.cells.EditorCell;
import jetbrains.mps.openapi.editor.EditorContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.nodeEditor.cells.EditorCell_Collection;
import jetbrains.mps.openapi.editor.style.Style;
import jetbrains.mps.editor.runtime.style.StyleImpl;
import jetbrains.mps.editor.runtime.style.StyleAttributes;
import jetbrains.mps.nodeEditor.cellProviders.CellProviderWithRole;
import jetbrains.mps.lang.editor.cellProviders.PropertyCellProvider;
import jetbrains.mps.nodeEditor.EditorManager;
import jetbrains.mps.nodeEditor.cells.EditorCell_Component;
import javax.swing.JComponent;
import javax.swing.JButton;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import jetbrains.mps.smodel.ModelAccess;
import me.tomassetti.bytecode.behavior.ClassFileLoader__BehaviorDescriptor;
import jetbrains.mps.nodeEditor.cells.EditorCell_Constant;
import jetbrains.mps.lang.editor.cellProviders.SingleRoleCellProvider;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.nodeEditor.cellMenu.DefaultChildSubstituteInfo;

public class ClassFileLoader_Editor extends DefaultNodeEditor {
  public EditorCell createEditorCell(EditorContext editorContext, SNode node) {
    return this.createCollection_f7t6qa_a(editorContext, node);
  }
  private EditorCell createCollection_f7t6qa_a(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createVertical(editorContext, node);
    editorCell.setCellId("Collection_f7t6qa_a");
    editorCell.setBig(true);
    editorCell.addEditorCell(this.createCollection_f7t6qa_a0(editorContext, node));
    editorCell.addEditorCell(this.createConstant_f7t6qa_b0(editorContext, node));
    editorCell.addEditorCell(this.createRefNode_f7t6qa_c0(editorContext, node));
    return editorCell;
  }
  private EditorCell createCollection_f7t6qa_a0(EditorContext editorContext, SNode node) {
    EditorCell_Collection editorCell = EditorCell_Collection.createHorizontal(editorContext, node);
    editorCell.setCellId("Collection_f7t6qa_a0");
    Style style = new StyleImpl();
    style.set(StyleAttributes.SELECTABLE, 0, false);
    editorCell.getStyle().putAll(style);
    editorCell.addEditorCell(this.createProperty_f7t6qa_a0a(editorContext, node));
    editorCell.addEditorCell(this.createJComponent_f7t6qa_b0a(editorContext, node));
    return editorCell;
  }
  private EditorCell createProperty_f7t6qa_a0a(EditorContext editorContext, SNode node) {
    CellProviderWithRole provider = new PropertyCellProvider(node, editorContext);
    provider.setRole("path");
    provider.setNoTargetText("<no path>");
    EditorCell editorCell;
    editorCell = provider.createEditorCell(editorContext);
    editorCell.setCellId("property_path");
    editorCell.setSubstituteInfo(provider.createDefaultSubstituteInfo());
    SNode attributeConcept = provider.getRoleAttribute();
    Class attributeKind = provider.getRoleAttributeClass();
    if (attributeConcept != null) {
      EditorManager manager = EditorManager.getInstanceFromContext(editorContext);
      return manager.createNodeRoleAttributeCell(attributeConcept, attributeKind, editorCell);
    } else
    return editorCell;
  }
  private EditorCell createJComponent_f7t6qa_b0a(EditorContext editorContext, SNode node) {
    EditorCell editorCell = EditorCell_Component.createComponentCell(editorContext, node, ClassFileLoader_Editor._QueryFunction_JComponent_f7t6qa_a1a0(node, editorContext), "_f7t6qa_b0a");
    editorCell.setCellId("JComponent_f7t6qa_b0a");
    return editorCell;
  }
  private static JComponent _QueryFunction_JComponent_f7t6qa_a1a0(final SNode node, final EditorContext editorContext) {
    JButton b = new JButton("Load");
    b.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent e) {
        ModelAccess.instance().runWriteActionInCommand(new Runnable() {
          public void run() {
            ClassFileLoader__BehaviorDescriptor.load_id1qlCQcqgn_R.invoke(node);
          }
        });
      }
    });
    return b;
  }
  private EditorCell createConstant_f7t6qa_b0(EditorContext editorContext, SNode node) {
    EditorCell_Constant editorCell = new EditorCell_Constant(editorContext, node, "");
    editorCell.setCellId("Constant_f7t6qa_b0");
    editorCell.setDefaultText("");
    return editorCell;
  }
  private EditorCell createRefNode_f7t6qa_c0(EditorContext editorContext, SNode node) {
    SingleRoleCellProvider provider = new ClassFileLoader_Editor.classFileSingleRoleHandler_f7t6qa_c0(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile"), editorContext);
    return provider.createCell();
  }
  private class classFileSingleRoleHandler_f7t6qa_c0 extends SingleRoleCellProvider {
    public classFileSingleRoleHandler_f7t6qa_c0(SNode ownerNode, SContainmentLink containmentLink, EditorContext context) {
      super(ownerNode, containmentLink, context);
    }
    protected EditorCell createChildCell(SNode child) {
      EditorCell editorCell = super.createChildCell(child);
      installCellInfo(child, editorCell);
      return editorCell;
    }
    private void installCellInfo(SNode child, EditorCell editorCell) {
      editorCell.setSubstituteInfo(new DefaultChildSubstituteInfo(myOwnerNode, myContainmentLink.getDeclarationNode(), myEditorContext));
      if (editorCell.getRole() == null) {
        editorCell.setRole("classFile");
      }
    }
    @Override
    protected EditorCell createEmptyCell() {
      EditorCell editorCell = super.createEmptyCell();
      editorCell.setCellId("empty_classFile");
      installCellInfo(null, editorCell);
      return editorCell;
    }
    protected String getNoTargetText() {
      return "<no classFile>";
    }
  }
}
