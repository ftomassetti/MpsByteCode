package me.tomassetti.bytecode.structure;

/*Generated by MPS */

import java.util.List;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.util.LinkedList;

public enum AccessFlag {
  ACC_PUBLIC("ACC_PUBLIC", "public"),
  ACC_PRIVATE("ACC_PRIVATE", "private"),
  ACC_PROTECTED("ACC_PROTECTED", "protected"),
  ACC_STATIC("ACC_STATIC", "static"),
  ACC_FINAL("ACC_FINAL", "final"),
  ACC_SUPER("ACC_SUPER", "super"),
  ACC_SYNCHRONIZED("ACC_SYNCHRONIZED", "synchronized"),
  ACC_BRIDGE("ACC_BRIDGE", "bridge"),
  ACC_VARARGS("ACC_VARARGS", "varargs"),
  ACC_INTERFACE("ACC_INTERFACE", "interface"),
  ACC_ABSTRACT("ACC_ABSTRACT", "abstract"),
  ACC_NATIVE("ACC_NATIVE", "native"),
  ACC_SYNTHETIC("ACC_SYNTHETIC", "synthetic"),
  ACC_ANNOTATION("ACC_ANNOTATION", "annotation"),
  ACC_ENUM("ACC_ENUM", "enum"),
  ACC_VOLATILE("ACC_VOLATILE", "volatile"),
  ACC_TRANSIENT("ACC_TRANSIENT", "transient");

  private final String myName;
  public String getName() {
    return myName;
  }
  private final String myValue;
  private AccessFlag(String name, String value) {
    myName = name;
    myValue = value;
  }
  public String getValue() {
    return myValue;
  }
  public String getValueAsString() {
    return myValue;
  }
  public static List<AccessFlag> getConstants() {
    List<AccessFlag> list = ListSequence.fromList(new LinkedList<AccessFlag>());
    ListSequence.fromList(list).addElement(AccessFlag.ACC_PUBLIC);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_PRIVATE);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_PROTECTED);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_STATIC);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_FINAL);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_SUPER);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_SYNCHRONIZED);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_BRIDGE);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_VARARGS);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_INTERFACE);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_ABSTRACT);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_NATIVE);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_SYNTHETIC);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_ANNOTATION);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_ENUM);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_VOLATILE);
    ListSequence.fromList(list).addElement(AccessFlag.ACC_TRANSIENT);
    return list;
  }
  public static AccessFlag getDefault() {
    return null;
  }
  public static AccessFlag parseValue(String value) {
    if (value == null) {
      return AccessFlag.getDefault();
    }
    if (value.equals(AccessFlag.ACC_PUBLIC.getValueAsString())) {
      return AccessFlag.ACC_PUBLIC;
    }
    if (value.equals(AccessFlag.ACC_PRIVATE.getValueAsString())) {
      return AccessFlag.ACC_PRIVATE;
    }
    if (value.equals(AccessFlag.ACC_PROTECTED.getValueAsString())) {
      return AccessFlag.ACC_PROTECTED;
    }
    if (value.equals(AccessFlag.ACC_STATIC.getValueAsString())) {
      return AccessFlag.ACC_STATIC;
    }
    if (value.equals(AccessFlag.ACC_FINAL.getValueAsString())) {
      return AccessFlag.ACC_FINAL;
    }
    if (value.equals(AccessFlag.ACC_SUPER.getValueAsString())) {
      return AccessFlag.ACC_SUPER;
    }
    if (value.equals(AccessFlag.ACC_SYNCHRONIZED.getValueAsString())) {
      return AccessFlag.ACC_SYNCHRONIZED;
    }
    if (value.equals(AccessFlag.ACC_BRIDGE.getValueAsString())) {
      return AccessFlag.ACC_BRIDGE;
    }
    if (value.equals(AccessFlag.ACC_VARARGS.getValueAsString())) {
      return AccessFlag.ACC_VARARGS;
    }
    if (value.equals(AccessFlag.ACC_INTERFACE.getValueAsString())) {
      return AccessFlag.ACC_INTERFACE;
    }
    if (value.equals(AccessFlag.ACC_ABSTRACT.getValueAsString())) {
      return AccessFlag.ACC_ABSTRACT;
    }
    if (value.equals(AccessFlag.ACC_NATIVE.getValueAsString())) {
      return AccessFlag.ACC_NATIVE;
    }
    if (value.equals(AccessFlag.ACC_SYNTHETIC.getValueAsString())) {
      return AccessFlag.ACC_SYNTHETIC;
    }
    if (value.equals(AccessFlag.ACC_ANNOTATION.getValueAsString())) {
      return AccessFlag.ACC_ANNOTATION;
    }
    if (value.equals(AccessFlag.ACC_ENUM.getValueAsString())) {
      return AccessFlag.ACC_ENUM;
    }
    if (value.equals(AccessFlag.ACC_VOLATILE.getValueAsString())) {
      return AccessFlag.ACC_VOLATILE;
    }
    if (value.equals(AccessFlag.ACC_TRANSIENT.getValueAsString())) {
      return AccessFlag.ACC_TRANSIENT;
    }
    return AccessFlag.getDefault();
  }
}
