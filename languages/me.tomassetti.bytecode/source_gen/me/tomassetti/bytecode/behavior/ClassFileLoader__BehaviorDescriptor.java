package me.tomassetti.bytecode.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import java.math.BigInteger;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.DataInputStream;
import java.io.FileInputStream;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.io.IOException;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IMapping;
import org.jetbrains.mps.openapi.language.SContainmentLink;
import jetbrains.mps.internal.collections.runtime.CollectionSequence;
import java.util.ArrayList;
import jetbrains.mps.internal.collections.runtime.IRightCombinator;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class ClassFileLoader__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, "me.tomassetti.bytecode.structure.ClassFileLoader");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  /*package*/ static final SMethod<String> asHexadecimal_id1qlCQcqguFh = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("asHexadecimal").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqguFh").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Byte.TYPE, ""));
  /*package*/ static final SMethod<Long> toInteger_id1qlCQcqgEyg = new SMethodBuilder<Long>(new SJavaCompoundTypeImpl(Long.TYPE)).name("toInteger").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqgEyg").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(byte[].class, ""));
  /*package*/ static final SMethod<Long> pow_id1qlCQcqgIKn = new SMethodBuilder<Long>(new SJavaCompoundTypeImpl(Long.TYPE)).name("pow").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqgIKn").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Integer.TYPE, ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  /*package*/ static final SMethod<Long> toInteger_id1qlCQcqgEPh = new SMethodBuilder<Long>(new SJavaCompoundTypeImpl(Long.TYPE)).name("toInteger").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqgEPh").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(byte[].class, ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<Void> load_id1qlCQcqgn_R = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("load").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qlCQcqgn_R").registry(REGISTRY).build();
  /*package*/ static final SMethod<SNode> loadClassAccessFlags_id1qlCQcqkEDC = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadClassAccessFlags").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqkEDC").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  /*package*/ static final SMethod<SNode> loadMethodAccessFlags_id1qlCQcqkGIa = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadMethodAccessFlags").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqkGIa").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  /*package*/ static final SMethod<SNode> loadAccessFlags_id1qlCQcqjTO4 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadAccessFlags").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqjTO4").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""), SMethodBuilder.createJavaParameter((Class<Map<Integer, String>>) ((Class) Object.class), ""));
  public static final SMethod<SNode> loadMethodInfo_id1qlCQcqjIRa = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadMethodInfo").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qlCQcqjIRa").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  /*package*/ static final SMethod<SNode> toUtf8Reference_idOFkQGRSQa2 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("toUtf8Reference").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("OFkQGRSQa2").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Long.TYPE, ""));
  public static final SMethod<SNode> loadFieldInfo_idOFkQGRSAW6 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadFieldInfo").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("OFkQGRSAW6").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<SNode> getConstantPoolElement_idr0PjdDds1G = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getConstantPoolElement").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("r0PjdDds1G").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> loadAttributeInfo_id1qlCQcqktGl = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadAttributeInfo").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qlCQcqktGl").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<SNode> readSignature_idOFkQGRUn7a = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("readSignature").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("OFkQGRUn7a").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  /*package*/ static final SMethod<SNode> readCode_idr0PjdDe5KL = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("readCode").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("r0PjdDe5KL").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  /*package*/ static final SMethod<SNode> readExceptionTableElement_idOFkQGS2cVz = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("readExceptionTableElement").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("OFkQGS2cVz").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  /*package*/ static final SMethod<BigInteger> parse_idOFkQGRVb6M = new SMethodBuilder<BigInteger>(new SJavaCompoundTypeImpl(BigInteger.class)).name("parse").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("OFkQGRVb6M").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""), SMethodBuilder.createJavaParameter(BigInteger.class, ""), SMethodBuilder.createJavaParameter((Class<SAbstractConcept>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""));
  public static final SMethod<List<SNode>> readCodeArray_idr0PjdDggI6 = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("readCodeArray").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("r0PjdDggI6").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<SNode> readArray_idr0PjdDgi$s = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("readArray").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("r0PjdDgi$s").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<SNode> readArray_id1qlCQcqkYgS = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("readArray").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qlCQcqkYgS").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(asHexadecimal_id1qlCQcqguFh, toInteger_id1qlCQcqgEyg, pow_id1qlCQcqgIKn, toInteger_id1qlCQcqgEPh, load_id1qlCQcqgn_R, loadClassAccessFlags_id1qlCQcqkEDC, loadMethodAccessFlags_id1qlCQcqkGIa, loadAccessFlags_id1qlCQcqjTO4, loadMethodInfo_id1qlCQcqjIRa, toUtf8Reference_idOFkQGRSQa2, loadFieldInfo_idOFkQGRSAW6, getConstantPoolElement_idr0PjdDds1G, loadAttributeInfo_id1qlCQcqktGl, readSignature_idOFkQGRUn7a, readCode_idr0PjdDe5KL, readExceptionTableElement_idOFkQGS2cVz, parse_idOFkQGRVb6M, readCodeArray_idr0PjdDggI6, readArray_idr0PjdDgi$s, readArray_id1qlCQcqkYgS);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String asHexadecimal_id1qlCQcqguFh(@NotNull SNode __thisNode__, byte b) {
    int val = b + 256;
    int high = val / 16;
    int low = val % 16;
    return Integer.toHexString(high) + Integer.toHexString(low);
  }
  /*package*/ static long toInteger_id1qlCQcqgEyg(@NotNull SNode __thisNode__, byte[] b) {
    return ((long) ClassFileLoader__BehaviorDescriptor.toInteger_id1qlCQcqgEPh.invoke(__thisNode__, b, ((int) 0)));
  }
  /*package*/ static long pow_id1qlCQcqgIKn(@NotNull SNode __thisNode__, int base, int exp) {
    if (exp < 0) {
      throw new RuntimeException("" + exp);
    }
    if (exp == 1) {
      return base;
    }
    if (exp == 0) {
      return 1;
    }

    System.out.println(exp);
    return base * ((long) ClassFileLoader__BehaviorDescriptor.pow_id1qlCQcqgIKn.invoke(__thisNode__, ((int) base), ((int) (exp - 1))));
  }
  /*package*/ static long toInteger_id1qlCQcqgEPh(@NotNull SNode __thisNode__, byte[] b, int index) {
    int exp = b.length - index - 1;
    if (exp == 0) {
      return b[index];
    } else {
      return ((long) ClassFileLoader__BehaviorDescriptor.pow_id1qlCQcqgIKn.invoke(__thisNode__, ((int) 256), ((int) exp))) * b[index] + ((long) ClassFileLoader__BehaviorDescriptor.toInteger_id1qlCQcqgEPh.invoke(__thisNode__, b, ((int) (index + 1))));
    }
  }
  /*package*/ static void load_id1qlCQcqgn_R(@NotNull SNode __thisNode__) {
    File file = new File(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7efL, "path")));
    byte[] u1 = new byte[1];
    byte[] u4 = new byte[4];
    try {
      DataInputStream dis = new DataInputStream(new FileInputStream(file));
      MyDataStream mds = new MyDataStream(dis);

      // Read magic signature 
      // it should be -54, -2, -70, -66 
      dis.readFully(u4);

      SLinkOperations.setTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, "me.tomassetti.bytecode.structure.ClassFile"))));

      // read version 
      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cd6L, "minor_version"), mds.readInt2AsNode());
      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cdbL, "major_version"), mds.readInt2AsNode());

      // constant pool count: the number is the number of elements + 1 
      long constantPoolSize = mds.readInt2AsLong();

      for (int constantPoolIndex = 1; constantPoolIndex < constantPoolSize; constantPoolIndex++) {
        System.out.println("Constant pool index " + constantPoolIndex);
        dis.readFully(u1);
        long tag = ((long) ClassFileLoader__BehaviorDescriptor.toInteger_id1qlCQcqgEyg.invoke(__thisNode__, u1));
        System.out.println("  TAG " + tag);
        switch ((int) tag) {
          case 1:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, "me.tomassetti.bytecode.structure.ConstantPoolUtf8")));
              SPropertyOperations.set(cp, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, 0x1695a3631a47083aL, "value"), mds.readString((int) mds.readInt2AsLong()));
              System.out.println("  STR[" + SPropertyOperations.getString(cp, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, 0x1695a3631a47083aL, "value")) + "]");
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 3:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c6L, "me.tomassetti.bytecode.structure.ConstantPoolInteger")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c6L, 0x67eeae9702c86079L, "bytes"), mds.readInt4AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 4:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c8L, "me.tomassetti.bytecode.structure.ConstantPoolFloat")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c8L, 0x67eeae9702c8607fL, "bytes"), mds.readInt4AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 5:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bcL, "me.tomassetti.bytecode.structure.ConstantPoolLong")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bcL, 0x67eeae9702c652dfL, "highBytes"), mds.readInt4AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bcL, 0x67eeae9702c652e0L, "lowBytes"), mds.readInt4AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
              constantPoolIndex++;
            }
            break;
          case 6:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x67eeae9702c66d1dL, "me.tomassetti.bytecode.structure.ConstantPoolDouble")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x67eeae9702c66d1dL, 0x67eeae9702c66d1eL, "highBytes"), mds.readInt4AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x67eeae9702c66d1dL, 0x67eeae9702c66d1fL, "lowBytes"), mds.readInt4AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
              constantPoolIndex++;
            }
            break;
          case 7:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9beL, "me.tomassetti.bytecode.structure.ConstantPoolClass")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9beL, 0x1695a3631a47ef15L, "nameIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 8:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c3L, "me.tomassetti.bytecode.structure.ConstantPoolString")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c3L, 0x1695a3631a4936dbL, "stringIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 9:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bdL, "me.tomassetti.bytecode.structure.ConstantPoolFieldref")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bdL, 0x1695a3631a47ef19L, "classIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bdL, 0x1695a3631a47ef17L, "nameAndTypeIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 10:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bfL, "me.tomassetti.bytecode.structure.ConstantPoolMethodref")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bfL, 0x1695a3631a47ef21L, "classIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bfL, 0x1695a3631a47ef22L, "nameAndTypeIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 11:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c1L, "me.tomassetti.bytecode.structure.ConstantPoolInterfaceMethodref")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c1L, 0x1695a3631a47ef1dL, "classIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c1L, 0x1695a3631a47ef1eL, "nameAndTypeIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 12:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c0L, "me.tomassetti.bytecode.structure.ConstantPoolNameAndType")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c0L, 0x1695a3631a47ef26L, "nameIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c0L, 0x1695a3631a47ef27L, "descriptorIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 15:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c5L, "me.tomassetti.bytecode.structure.ConstantPoolMethodHandle")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c5L, 0x67eeae9702c890ddL, "referenceKind"), mds.readInt1AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c5L, 0x67eeae9702c890dfL, "referenceIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 16:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c4L, "me.tomassetti.bytecode.structure.ConstantPoolMethodType")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c4L, 0x67eeae9702c8cc58L, "descriptorIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 18:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c2L, "me.tomassetti.bytecode.structure.ConstantPoolInvokeDynamic")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c2L, 0x67eeae9702c8ee0dL, "bootstrapMethodAttrIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c2L, 0x67eeae9702c8ee0fL, "nameAndTypeIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          default:
            throw new RuntimeException("Unknown tag " + tag);
        }
      }

      // access flags 
      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cedL, "access_flags"), ClassFileLoader__BehaviorDescriptor.loadClassAccessFlags_id1qlCQcqkEDC.invoke(__thisNode__, mds));

      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cf2L, "this_class"), mds.readInt2AsNode());
      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cf8L, "super_class"), mds.readInt2AsNode());

      long numberOfInterfaces = mds.readInt2AsLong();
      if (numberOfInterfaces > 0) {
        throw new RuntimeException("Not implemented: interfaces");
      }

      long numberOfFields = mds.readInt2AsLong();
      for (int i = 0; i < numberOfFields; i++) {
        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x6c0d533693acb5cL, "fieldInfos"))).addElement(ClassFileLoader__BehaviorDescriptor.loadFieldInfo_idOFkQGRSAW6.invoke(__thisNode__, mds));
      }

      long numberOfMethods = mds.readInt2AsLong();
      for (int i = 0; i < numberOfMethods; i++) {
        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a4f0683L, "methodInfos"))).addElement(ClassFileLoader__BehaviorDescriptor.loadMethodInfo_id1qlCQcqjIRa.invoke(__thisNode__, mds));
      }

      long numberOfAttributes = mds.readInt2AsLong();
      for (int i = 0; i < numberOfAttributes; i++) {
        System.out.println("Reading class attribute " + i + " of " + numberOfAttributes);
        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a51ca25L, "attributeInfos"))).addElement(ClassFileLoader__BehaviorDescriptor.loadAttributeInfo_id1qlCQcqktGl.invoke(__thisNode__, mds));
      }

    } catch (IOException e) {
      e.printStackTrace();
    }
  }
  /*package*/ static SNode loadClassAccessFlags_id1qlCQcqkEDC(@NotNull SNode __thisNode__, MyDataStream mds) {
    return ((SNode) ClassFileLoader__BehaviorDescriptor.loadAccessFlags_id1qlCQcqjTO4.invoke(__thisNode__, mds, MapSequence.<Integer, String>fromMapAndKeysArray(new HashMap<Integer, String>(), 1, 16, 32, 512, 1024, 4096, 8192, 16384).withValues("public", "final", "super", "interface", "abstract", "synthetic", "annotation", "enum")));
  }
  /*package*/ static SNode loadMethodAccessFlags_id1qlCQcqkGIa(@NotNull SNode __thisNode__, MyDataStream mds) {
    return ((SNode) ClassFileLoader__BehaviorDescriptor.loadAccessFlags_id1qlCQcqjTO4.invoke(__thisNode__, mds, MapSequence.<Integer, String>fromMapAndKeysArray(new HashMap<Integer, String>(), 1, 2, 4, 8, 16, 32, 64, 128, 256, 1024, 2048, 4096).withValues("public", "private", "protected", "static", "final", "synchronized", "bridge", "varargs", "native", "abstract", "strict", "synthetic")));
  }
  /*package*/ static SNode loadAccessFlags_id1qlCQcqjTO4(@NotNull SNode __thisNode__, MyDataStream mds, Map<Integer, String> mapping) {
    try {
      SNode accessFlags = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4fb665L, "me.tomassetti.bytecode.structure.AccessFlags")));
      long value = mds.readInt2AsLong();

      for (IMapping<Integer, String> m : MapSequence.fromMap(mapping)) {
        if ((value & m.key()) > 0) {
          SNode holder = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a498b94L, "me.tomassetti.bytecode.structure.AccessFlagHolder")));
          SPropertyOperations.set(holder, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a498b94L, 0x1695a3631a498b95L, "flag"), m.value());
          ListSequence.fromList(SLinkOperations.getChildren(accessFlags, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4fb665L, 0x1695a3631a4fb668L, "flags"))).addElement(holder);
        }
      }
      return accessFlags;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode loadMethodInfo_id1qlCQcqjIRa(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode methodInfo = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, "me.tomassetti.bytecode.structure.MethodInfo")));
      SLinkOperations.setTarget(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a4ea153L, "accessFlags"), ClassFileLoader__BehaviorDescriptor.loadMethodAccessFlags_id1qlCQcqkGIa.invoke(__thisNode__, mds));
      SLinkOperations.setTarget(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a4ea158L, "nameIndex"), ClassFileLoader__BehaviorDescriptor.toUtf8Reference_idOFkQGRSQa2.invoke(__thisNode__, ((long) (long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(mds.readInt2AsNode()))));
      System.out.println("Method name " + SLinkOperations.getTarget(SLinkOperations.getTarget(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a4ea158L, "nameIndex")), MetaAdapterFactory.getReferenceLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0xd2b536b37df3897L, 0xd2b536b37df3898L, "element")));
      SLinkOperations.setTarget(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a4ea155L, "descriptorIndex"), ClassFileLoader__BehaviorDescriptor.toUtf8Reference_idOFkQGRSQa2.invoke(__thisNode__, ((long) (long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(mds.readInt2AsNode()))));
      long attributesCount = mds.readInt2AsLong();
      for (int i = 0; i < attributesCount; i++) {
        ListSequence.fromList(SLinkOperations.getChildren(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a525217L, "attributes"))).addElement(ClassFileLoader__BehaviorDescriptor.loadAttributeInfo_id1qlCQcqktGl.invoke(__thisNode__, mds));
      }

      return methodInfo;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode toUtf8Reference_idOFkQGRSQa2(@NotNull SNode __thisNode__, long index) {
    SNode element = ClassFile__BehaviorDescriptor.getConstantPoolElement_idOFkQGRSVg7.invoke(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), ((long) index));
    SNode ref = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0xd2b536b37df3894L, "me.tomassetti.bytecode.structure.ConstantPoolUtf8Reference")));
    SLinkOperations.setTarget(ref, MetaAdapterFactory.getReferenceLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0xd2b536b37df3897L, 0xd2b536b37df3898L, "element"), SNodeOperations.cast(element, MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, "me.tomassetti.bytecode.structure.ConstantPoolUtf8")));
    return ref;
  }
  /*package*/ static SNode loadFieldInfo_idOFkQGRSAW6(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode fieldInfo = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d533693aca41L, "me.tomassetti.bytecode.structure.FieldInfo")));
      SLinkOperations.setTarget(fieldInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d533693aca41L, 0xd2b536b37e34ac9L, "accessFlags"), ClassFileLoader__BehaviorDescriptor.loadMethodAccessFlags_id1qlCQcqkGIa.invoke(__thisNode__, mds));
      SLinkOperations.setTarget(fieldInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d533693aca41L, 0xd2b536b37e0d553L, "nameIndex"), ClassFileLoader__BehaviorDescriptor.toUtf8Reference_idOFkQGRSQa2.invoke(__thisNode__, ((long) mds.readInt2AsLong())));
      SLinkOperations.setTarget(fieldInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d533693aca41L, 0xd2b536b37e0d555L, "descriptorIndex"), ClassFileLoader__BehaviorDescriptor.toUtf8Reference_idOFkQGRSQa2.invoke(__thisNode__, ((long) mds.readInt2AsLong())));
      long attributesCount = mds.readInt2AsLong();

      for (int i = 0; i < attributesCount; i++) {
        ListSequence.fromList(SLinkOperations.getChildren(fieldInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d533693aca41L, 0xd2b536b37e0d55cL, "attributes"))).addElement(ClassFileLoader__BehaviorDescriptor.loadAttributeInfo_id1qlCQcqktGl.invoke(__thisNode__, mds));
      }

      return fieldInfo;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode getConstantPoolElement_idr0PjdDds1G(@NotNull SNode __thisNode__, SNode index) {
    int indexFromZero = ((int) ((long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(index) - 1));
    if (indexFromZero < 0) {
      throw new RuntimeException("Invalid index " + indexFromZero);
    }
    if (indexFromZero >= ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).count()) {
      throw new RuntimeException("Invalid index " + indexFromZero);
    }
    return ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).getElement(indexFromZero);
  }
  /*package*/ static SNode loadAttributeInfo_id1qlCQcqktGl(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode attributeInfo = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, "me.tomassetti.bytecode.structure.AttributeInfo")));
      SLinkOperations.setTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a52669cL, "nameIndex"), ClassFileLoader__BehaviorDescriptor.toUtf8Reference_idOFkQGRSQa2.invoke(__thisNode__, ((long) mds.readInt2AsLong())));
      String nameNode = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a52669cL, "nameIndex")), MetaAdapterFactory.getReferenceLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0xd2b536b37df3897L, 0xd2b536b37df3898L, "element")), MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, 0x1695a3631a47083aL, "value"));
      if (nameNode.equals("Code")) {
        SLinkOperations.setTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a534cd2L, "data"), ClassFileLoader__BehaviorDescriptor.readCode_idr0PjdDe5KL.invoke(__thisNode__, mds));
      } else if (nameNode.equals("Signature")) {
        SLinkOperations.setTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a534cd2L, "data"), ClassFileLoader__BehaviorDescriptor.readSignature_idOFkQGRUn7a.invoke(__thisNode__, mds));
      } else {
        SLinkOperations.setTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a534cd2L, "data"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336931d741L, "me.tomassetti.bytecode.structure.RawAttributeInfoData"))));
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a534cd2L, "data")), MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336931d741L, "me.tomassetti.bytecode.structure.RawAttributeInfoData")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336931d741L, 0x6c0d5336931d742L, "bytes"), ClassFileLoader__BehaviorDescriptor.readArray_id1qlCQcqkYgS.invoke(__thisNode__, mds));
      }
      System.out.println("DONE");
      return attributeInfo;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode readSignature_idOFkQGRUn7a(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      BigInteger length = mds.readInt4AsBigInteger();
      SNode data = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0xd2b536b37e91620L, "me.tomassetti.bytecode.structure.SignatureAttributeInfoData")));
      SLinkOperations.setTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0xd2b536b37e91620L, 0xd2b536b37e91621L, "signature"), ClassFileLoader__BehaviorDescriptor.toUtf8Reference_idOFkQGRSQa2.invoke(__thisNode__, ((long) mds.readInt2AsLong())));
      return data;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode readCode_idr0PjdDe5KL(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      BigInteger length = mds.readInt4AsBigInteger();
      SNode data = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, "me.tomassetti.bytecode.structure.CodeAttributeInfoData")));
      SLinkOperations.setTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382672L, "maxStack"), mds.readInt2AsNode());
      SLinkOperations.setTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382670L, "maxLocals"), mds.readInt2AsNode());
      System.out.println("maxStack " + (long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(SLinkOperations.getTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382672L, "maxStack"))));
      System.out.println("maxLocals " + (long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(SLinkOperations.getTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382670L, "maxLocals"))));

      ListSequence.fromList(SLinkOperations.getChildren(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382676L, "instructions"))).addSequence(ListSequence.fromList(ClassFileLoader__BehaviorDescriptor.readCodeArray_idr0PjdDggI6.invoke(__thisNode__, mds)));
      SLinkOperations.setTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d5336938267aL, "exceptionTable"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382685L, "me.tomassetti.bytecode.structure.ExceptionTable"))));
      long excTableLength = mds.readInt2AsLong();
      System.out.println("EXC TABLE LENGTH " + excTableLength);
      for (long i = 0; i < excTableLength; i++) {
        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d5336938267aL, "exceptionTable")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382685L, 0x6c0d53369382687L, "elements"))).addElement(ClassFileLoader__BehaviorDescriptor.readExceptionTableElement_idOFkQGS2cVz.invoke(__thisNode__, mds));
      }
      long attrCount = mds.readInt2AsLong();
      for (long i = 0; i < attrCount; i++) {
        ListSequence.fromList(SLinkOperations.getChildren(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382691L, "attributeInfos"))).addElement(ClassFileLoader__BehaviorDescriptor.loadAttributeInfo_id1qlCQcqktGl.invoke(__thisNode__, mds));
      }

      return data;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode readExceptionTableElement_idOFkQGS2cVz(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode element = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382686L, "me.tomassetti.bytecode.structure.ExceptionTableElement")));
      SLinkOperations.setTarget(element, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382686L, 0xd2b536b38085facL, "startPc"), mds.readInt2AsNode());
      SLinkOperations.setTarget(element, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382686L, 0xd2b536b38085fadL, "endPc"), mds.readInt2AsNode());
      SLinkOperations.setTarget(element, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382686L, 0xd2b536b38085faeL, "handlerPc"), mds.readInt2AsNode());
      SLinkOperations.setTarget(element, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382686L, 0xd2b536b38085fafL, "catchType"), mds.readInt2AsNode());
      return element;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static BigInteger parse_idOFkQGRVb6M(@NotNull SNode __thisNode__, MyDataStream mds, BigInteger i, SAbstractConcept concept, List<SNode> instructions) {
    SNode instruction = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(concept));
    try {
      for (SContainmentLink link : CollectionSequence.fromCollection(concept.getContainmentLinks())) {
        if (!(link.getName().equals("smodelAttribute"))) {
          if (link.isMultiple() || link.isOptional()) {
            throw new RuntimeException("link multiple or optional " + link.getName() + " for concept " + concept.getQualifiedName());
          }
          if (link.getTargetConcept().equals(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdcL, "me.tomassetti.bytecode.structure.Unsigned1Byte"))) {
            SNode param = mds.readInt1AsNode();
            instruction.addChild(link, param);
            i = i.add(BigInteger.ONE);
          } else if (link.getTargetConcept().equals(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a47ef12L, "me.tomassetti.bytecode.structure.Unsigned2Bytes"))) {
            SNode param = mds.readInt2AsNode();
            instruction.addChild(link, param);
            i = i.add(BigInteger.ONE);
            i = i.add(BigInteger.ONE);
          } else if (link.getTargetConcept().equals(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534bf3L, "me.tomassetti.bytecode.structure.Unsigned4Bytes"))) {
            SNode param = mds.readInt4AsNode();
            instruction.addChild(link, param);
            i = i.add(BigInteger.ONE);
            i = i.add(BigInteger.ONE);
            i = i.add(BigInteger.ONE);
            i = i.add(BigInteger.ONE);
          } else {
            throw new RuntimeException("Type " + link.getTargetConcept().getQualifiedName() + " for link " + link.getName());
          }
        }
      }

      ListSequence.fromList(instructions).addElement(SNodeOperations.cast(instruction, MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336940e202L, "me.tomassetti.bytecode.structure.Instruction")));
      return i;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static List<SNode> readCodeArray_idr0PjdDggI6(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode array = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, "me.tomassetti.bytecode.structure.Unsigned1BytesArray")));
      List<SNode> instructions = new ArrayList<SNode>();
      BigInteger length = mds.readInt4AsBigInteger();
      System.out.println("Array length " + length);
      for (BigInteger i = BigInteger.ONE; i.compareTo(length) <= 0;) {
        int code = mds.readInt1AsInt();
        i = i.add(BigInteger.ONE);
        if (MapSequence.fromMap(OpCodeToInstructionMapping.OPCODE_TO_INSTRUCTION).containsKey(code) && MapSequence.fromMap(OpCodeToInstructionMapping.OPCODE_TO_INSTRUCTION).get(code) != null) {
          int startingIndex = ListSequence.fromList(instructions).foldRight(0, new IRightCombinator<SNode, Integer>() {
            public Integer combine(SNode it, Integer s) {
              return s + (int) Instruction__BehaviorDescriptor.length_id1kVJV2A9Wse.invoke(it);
            }
          });

          System.out.println("READING " + startingIndex + " " + MapSequence.fromMap(OpCodeToInstructionMapping.OPCODE_TO_INSTRUCTION).get(code).getName() + " array length " + length);
          i = ClassFileLoader__BehaviorDescriptor.parse_idOFkQGRVb6M.invoke(__thisNode__, mds, i, MapSequence.fromMap(OpCodeToInstructionMapping.OPCODE_TO_INSTRUCTION).get(code), instructions);
        } else {
          switch (code) {
            case 170:
              {
                int startingIndex = ListSequence.fromList(instructions).foldRight(0, new IRightCombinator<SNode, Integer>() {
                  public Integer combine(SNode it, Integer s) {
                    return s + (int) Instruction__BehaviorDescriptor.length_id1kVJV2A9Wse.invoke(it);
                  }
                });
                int padding = (startingIndex + 1) % 4;
                for (int pi = 0; pi < padding; pi++) {
                  mds.readInt1AsInt();
                }
                i = i.add(BigInteger.valueOf(padding));
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a617d3c9L, "me.tomassetti.bytecode.structure.Tableswitch")));
                SLinkOperations.setTarget(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a617d3c9L, 0x153bbfb0a617d3cbL, "default"), mds.readInt4AsSignedNode());
                SLinkOperations.setTarget(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a617d3c9L, 0x153bbfb0a617d3ccL, "low"), mds.readInt4AsSignedNode());
                SLinkOperations.setTarget(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a617d3c9L, 0x153bbfb0a617d3cdL, "high"), mds.readInt4AsSignedNode());
                i = i.add(BigInteger.valueOf(12));
                int howManyJumpOffsets = SPropertyOperations.getInteger(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a617d3c9L, 0x153bbfb0a617d3cdL, "high")), MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a63f2540L, 0x153bbfb0a63f2541L, "value")) - SPropertyOperations.getInteger(SLinkOperations.getTarget(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a617d3c9L, 0x153bbfb0a617d3ccL, "low")), MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a63f2540L, 0x153bbfb0a63f2541L, "value")) + 1;


                for (int ji = 0; ji < howManyJumpOffsets; ji++) {
                  ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a617d3c9L, 0x153bbfb0a617d3d2L, "jumpOffsets"))).addElement(mds.readInt4AsNode());
                  i = i.add(BigInteger.valueOf(4));
                }
                ListSequence.fromList(instructions).addElement(node);
              }
              break;
            case 171:
              {
                int startingIndex = ListSequence.fromList(instructions).foldRight(0, new IRightCombinator<SNode, Integer>() {
                  public Integer combine(SNode it, Integer s) {
                    return s + (int) Instruction__BehaviorDescriptor.length_id1kVJV2A9Wse.invoke(it);
                  }
                });
                int padding = (startingIndex + 1) % 4;
                for (int pi = 0; pi < padding; pi++) {
                  mds.readInt1AsInt();
                }
                i = i.add(BigInteger.valueOf(padding));
                SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a6164e38L, "me.tomassetti.bytecode.structure.Lookupswitch")));
                SLinkOperations.setTarget(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a6164e38L, 0x153bbfb0a6164e3bL, "default"), mds.readInt4AsSignedNode());
                int npairs = SPropertyOperations.getInteger(mds.readInt4AsSignedNode(), MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a63f2540L, 0x153bbfb0a63f2541L, "value"));
                i = i.add(BigInteger.valueOf(8));
                for (int ji = 0; ji < npairs; ji++) {
                  ListSequence.fromList(SLinkOperations.getChildren(node, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x153bbfb0a6164e38L, 0x153bbfb0a6164e42L, "matchOffsetPairs"))).addElement(mds.readInt4AsSignedNode());
                  i = i.add(BigInteger.valueOf(4));
                }
                ListSequence.fromList(instructions).addElement(node);
              }
            case 196:
              throw new UnsupportedOperationException("WIDE NOT IMPLEMENTED");
            default:
              throw new RuntimeException("Unknown instruction " + code);
          }
        }

      }
      return instructions;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode readArray_idr0PjdDgi$s(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode array = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, "me.tomassetti.bytecode.structure.Unsigned1BytesArray")));
      BigInteger length = mds.readInt4AsBigInteger();
      System.out.println("Array length " + length);
      for (BigInteger i = BigInteger.ONE; i.compareTo(length) <= 0; i = i.add(BigInteger.ONE)) {
        ListSequence.fromList(SLinkOperations.getChildren(array, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, 0x1695a3631a534ce0L, "elements"))).addElement(mds.readInt1AsNode());
      }
      return array;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode readArray_id1qlCQcqkYgS(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode array = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, "me.tomassetti.bytecode.structure.Unsigned1BytesArray")));
      BigInteger length = mds.readInt4AsBigInteger();
      System.out.println("Array length " + length);
      for (BigInteger i = BigInteger.ONE; i.compareTo(length) <= 0; i = i.add(BigInteger.ONE)) {
        ListSequence.fromList(SLinkOperations.getChildren(array, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, 0x1695a3631a534ce0L, "elements"))).addElement(mds.readInt1AsNode());
      }
      return array;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /*package*/ ClassFileLoader__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) asHexadecimal_id1qlCQcqguFh(node, ((byte) (Byte) parameters[0])));
      case 1:
        return (T) ((Long) toInteger_id1qlCQcqgEyg(node, (byte[]) parameters[0]));
      case 2:
        return (T) ((Long) pow_id1qlCQcqgIKn(node, ((int) (Integer) parameters[0]), ((int) (Integer) parameters[1])));
      case 3:
        return (T) ((Long) toInteger_id1qlCQcqgEPh(node, (byte[]) parameters[0], ((int) (Integer) parameters[1])));
      case 4:
        load_id1qlCQcqgn_R(node);
        return null;
      case 5:
        return (T) ((SNode) loadClassAccessFlags_id1qlCQcqkEDC(node, (MyDataStream) parameters[0]));
      case 6:
        return (T) ((SNode) loadMethodAccessFlags_id1qlCQcqkGIa(node, (MyDataStream) parameters[0]));
      case 7:
        return (T) ((SNode) loadAccessFlags_id1qlCQcqjTO4(node, (MyDataStream) parameters[0], (Map<Integer, String>) parameters[1]));
      case 8:
        return (T) ((SNode) loadMethodInfo_id1qlCQcqjIRa(node, (MyDataStream) parameters[0]));
      case 9:
        return (T) ((SNode) toUtf8Reference_idOFkQGRSQa2(node, ((long) (Long) parameters[0])));
      case 10:
        return (T) ((SNode) loadFieldInfo_idOFkQGRSAW6(node, (MyDataStream) parameters[0]));
      case 11:
        return (T) ((SNode) getConstantPoolElement_idr0PjdDds1G(node, (SNode) parameters[0]));
      case 12:
        return (T) ((SNode) loadAttributeInfo_id1qlCQcqktGl(node, (MyDataStream) parameters[0]));
      case 13:
        return (T) ((SNode) readSignature_idOFkQGRUn7a(node, (MyDataStream) parameters[0]));
      case 14:
        return (T) ((SNode) readCode_idr0PjdDe5KL(node, (MyDataStream) parameters[0]));
      case 15:
        return (T) ((SNode) readExceptionTableElement_idOFkQGS2cVz(node, (MyDataStream) parameters[0]));
      case 16:
        return (T) ((BigInteger) parse_idOFkQGRVb6M(node, (MyDataStream) parameters[0], (BigInteger) parameters[1], (SAbstractConcept) parameters[2], (List<SNode>) parameters[3]));
      case 17:
        return (T) ((List<SNode>) readCodeArray_idr0PjdDggI6(node, (MyDataStream) parameters[0]));
      case 18:
        return (T) ((SNode) readArray_idr0PjdDgi$s(node, (MyDataStream) parameters[0]));
      case 19:
        return (T) ((SNode) readArray_id1qlCQcqkYgS(node, (MyDataStream) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
