package me.tomassetti.bytecode.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.Map;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.io.File;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.io.DataInputStream;
import java.io.FileInputStream;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import java.io.IOException;
import jetbrains.mps.internal.collections.runtime.MapSequence;
import java.util.HashMap;
import jetbrains.mps.internal.collections.runtime.IMapping;
import java.math.BigInteger;
import java.util.ArrayList;
import jetbrains.mps.lang.typesystem.runtime.HUtil;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;
import org.jetbrains.mps.openapi.persistence.PersistenceFacade;
import jetbrains.mps.smodel.SModelUtil_new;

public final class ClassFileLoader__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, "me.tomassetti.bytecode.structure.ClassFileLoader");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  /*package*/ static final SMethod<String> asHexadecimal_id1qlCQcqguFh = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("asHexadecimal").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqguFh").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Byte.TYPE, ""));
  /*package*/ static final SMethod<Long> toInteger_id1qlCQcqgEyg = new SMethodBuilder<Long>(new SJavaCompoundTypeImpl(Long.TYPE)).name("toInteger").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqgEyg").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(byte[].class, ""));
  /*package*/ static final SMethod<Long> pow_id1qlCQcqgIKn = new SMethodBuilder<Long>(new SJavaCompoundTypeImpl(Long.TYPE)).name("pow").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqgIKn").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(Integer.TYPE, ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  /*package*/ static final SMethod<Long> toInteger_id1qlCQcqgEPh = new SMethodBuilder<Long>(new SJavaCompoundTypeImpl(Long.TYPE)).name("toInteger").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqgEPh").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(byte[].class, ""), SMethodBuilder.createJavaParameter(Integer.TYPE, ""));
  public static final SMethod<Void> load_id1qlCQcqgn_R = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("load").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qlCQcqgn_R").registry(REGISTRY).build();
  /*package*/ static final SMethod<SNode> loadClassAccessFlags_id1qlCQcqkEDC = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadClassAccessFlags").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqkEDC").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  /*package*/ static final SMethod<SNode> loadMethodAccessFlags_id1qlCQcqkGIa = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadMethodAccessFlags").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqkGIa").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  /*package*/ static final SMethod<SNode> loadAccessFlags_id1qlCQcqjTO4 = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadAccessFlags").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("1qlCQcqjTO4").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""), SMethodBuilder.createJavaParameter((Class<Map<Integer, String>>) ((Class) Object.class), ""));
  public static final SMethod<SNode> loadMethodInfo_id1qlCQcqjIRa = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadMethodInfo").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qlCQcqjIRa").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<SNode> getConstantPoolElement_idr0PjdDds1G = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("getConstantPoolElement").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("r0PjdDds1G").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<SNode>) ((Class) Object.class), ""));
  public static final SMethod<SNode> loadAttributeInfo_id1qlCQcqktGl = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("loadAttributeInfo").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qlCQcqktGl").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<SNode> readCode_idr0PjdDe5KL = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("readCode").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("r0PjdDe5KL").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<List<SNode>> readCodeArray_idr0PjdDggI6 = new SMethodBuilder<List<SNode>>(new SJavaCompoundTypeImpl((Class<List<SNode>>) ((Class) Object.class))).name("readCodeArray").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("r0PjdDggI6").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<SNode> readArray_idr0PjdDgi$s = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("readArray").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("r0PjdDgi$s").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));
  public static final SMethod<SNode> readArray_id1qlCQcqkYgS = new SMethodBuilder<SNode>(new SJavaCompoundTypeImpl((Class<SNode>) ((Class) Object.class))).name("readArray").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1qlCQcqkYgS").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(MyDataStream.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(asHexadecimal_id1qlCQcqguFh, toInteger_id1qlCQcqgEyg, pow_id1qlCQcqgIKn, toInteger_id1qlCQcqgEPh, load_id1qlCQcqgn_R, loadClassAccessFlags_id1qlCQcqkEDC, loadMethodAccessFlags_id1qlCQcqkGIa, loadAccessFlags_id1qlCQcqjTO4, loadMethodInfo_id1qlCQcqjIRa, getConstantPoolElement_idr0PjdDds1G, loadAttributeInfo_id1qlCQcqktGl, readCode_idr0PjdDe5KL, readCodeArray_idr0PjdDggI6, readArray_idr0PjdDgi$s, readArray_id1qlCQcqkYgS);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static String asHexadecimal_id1qlCQcqguFh(@NotNull SNode __thisNode__, byte b) {
    int val = b + 256;
    int high = val / 16;
    int low = val % 16;
    return Integer.toHexString(high) + Integer.toHexString(low);
  }
  /*package*/ static long toInteger_id1qlCQcqgEyg(@NotNull SNode __thisNode__, byte[] b) {
    return ((long) ClassFileLoader__BehaviorDescriptor.toInteger_id1qlCQcqgEPh.invoke(__thisNode__, b, ((int) 0)));
  }
  /*package*/ static long pow_id1qlCQcqgIKn(@NotNull SNode __thisNode__, int base, int exp) {
    if (exp < 0) {
      throw new RuntimeException("" + exp);
    }
    if (exp == 1) {
      return base;
    }
    if (exp == 0) {
      return 1;
    }

    System.out.println(exp);
    return base * ((long) ClassFileLoader__BehaviorDescriptor.pow_id1qlCQcqgIKn.invoke(__thisNode__, ((int) base), ((int) (exp - 1))));
  }
  /*package*/ static long toInteger_id1qlCQcqgEPh(@NotNull SNode __thisNode__, byte[] b, int index) {
    int exp = b.length - index - 1;
    if (exp == 0) {
      return b[index];
    } else {
      return ((long) ClassFileLoader__BehaviorDescriptor.pow_id1qlCQcqgIKn.invoke(__thisNode__, ((int) 256), ((int) exp))) * b[index] + ((long) ClassFileLoader__BehaviorDescriptor.toInteger_id1qlCQcqgEPh.invoke(__thisNode__, b, ((int) (index + 1))));
    }
  }
  /*package*/ static void load_id1qlCQcqgn_R(@NotNull SNode __thisNode__) {
    File file = new File(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7efL, "path")));
    byte[] u1 = new byte[1];
    byte[] u4 = new byte[4];
    try {
      DataInputStream dis = new DataInputStream(new FileInputStream(file));
      MyDataStream mds = new MyDataStream(dis);

      // Read magic signature 
      // it should be -54, -2, -70, -66 
      dis.readFully(u4);

      SLinkOperations.setTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, "me.tomassetti.bytecode.structure.ClassFile"))));

      // read version 
      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cd6L, "minor_version"), mds.readInt2AsNode());
      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cdbL, "major_version"), mds.readInt2AsNode());

      // constant pool count: the number is the number of elements + 1 
      long constantPoolSize = mds.readInt2AsLong();

      for (int constantPoolIndex = 1; constantPoolIndex < constantPoolSize; constantPoolIndex++) {
        System.out.println("Constant pool index " + constantPoolIndex);
        dis.readFully(u1);
        long tag = ((long) ClassFileLoader__BehaviorDescriptor.toInteger_id1qlCQcqgEyg.invoke(__thisNode__, u1));
        System.out.println("TAG " + tag);
        switch ((int) tag) {
          case 7:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9beL, "me.tomassetti.bytecode.structure.ConstantPoolClass")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9beL, 0x1695a3631a47ef15L, "nameIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 1:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, "me.tomassetti.bytecode.structure.ConstantPoolUtf8")));
              SPropertyOperations.set(cp, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, 0x1695a3631a47083aL, "value"), mds.readString((int) mds.readInt2AsLong()));
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 9:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bdL, "me.tomassetti.bytecode.structure.ConstantPoolFieldref")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bdL, 0x1695a3631a47ef19L, "classIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bdL, 0x1695a3631a47ef17L, "nameAndTypeIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 10:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bfL, "me.tomassetti.bytecode.structure.ConstantPoolMethodref")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bfL, 0x1695a3631a47ef21L, "classIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9bfL, 0x1695a3631a47ef22L, "nameAndTypeIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 11:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c1L, "me.tomassetti.bytecode.structure.ConstantPoolInterfaceMethodref")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c1L, 0x1695a3631a47ef1dL, "classIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c1L, 0x1695a3631a47ef1eL, "nameAndTypeIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 12:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c0L, "me.tomassetti.bytecode.structure.ConstantPoolNameAndType")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c0L, 0x1695a3631a47ef26L, "nameIndex"), mds.readInt2AsNode());
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c0L, 0x1695a3631a47ef27L, "descriptorIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          case 8:
            {
              SNode cp = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c3L, "me.tomassetti.bytecode.structure.ConstantPoolString")));
              SLinkOperations.setTarget(cp, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c3L, 0x1695a3631a4936dbL, "stringIndex"), mds.readInt2AsNode());
              ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).addElement(cp);
            }
            break;
          default:
            throw new RuntimeException("Unknown tag " + tag);
        }
      }

      // access flags 
      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cedL, "access_flags"), ClassFileLoader__BehaviorDescriptor.loadClassAccessFlags_id1qlCQcqkEDC.invoke(__thisNode__, mds));

      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cf2L, "this_class"), mds.readInt2AsNode());
      SLinkOperations.setTarget(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x40880d8921831cf8L, "super_class"), mds.readInt2AsNode());

      long numberOfInterfaces = mds.readInt2AsLong();
      if (numberOfInterfaces > 0) {
        throw new RuntimeException("Not implemented: interfaces");
      }

      long numberOfFields = mds.readInt2AsLong();
      if (numberOfFields > 0) {
        throw new RuntimeException("Not implemented: fields");
      }

      long numberOfMethods = mds.readInt2AsLong();
      System.out.println("Number of methods: " + numberOfMethods);
      for (int i = 0; i < numberOfMethods; i++) {
        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a4f0683L, "methodInfos"))).addElement(ClassFileLoader__BehaviorDescriptor.loadMethodInfo_id1qlCQcqjIRa.invoke(__thisNode__, mds));
      }

      long numberOfAttributes = mds.readInt2AsLong();
      for (int i = 0; i < numberOfAttributes; i++) {
        System.out.println("Reading class attribute " + i + " of " + numberOfAttributes);
        ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a51ca25L, "attributeInfos"))).addElement(ClassFileLoader__BehaviorDescriptor.loadAttributeInfo_id1qlCQcqktGl.invoke(__thisNode__, mds));
      }

    } catch (IOException e) {
      e.printStackTrace();
    }
  }
  /*package*/ static SNode loadClassAccessFlags_id1qlCQcqkEDC(@NotNull SNode __thisNode__, MyDataStream mds) {
    return ((SNode) ClassFileLoader__BehaviorDescriptor.loadAccessFlags_id1qlCQcqjTO4.invoke(__thisNode__, mds, MapSequence.<Integer, String>fromMapAndKeysArray(new HashMap<Integer, String>(), 1, 16, 32, 512, 1024, 4096, 8192, 16384).withValues("public", "final", "super", "interface", "abstract", "synthetic", "annotation", "enum")));
  }
  /*package*/ static SNode loadMethodAccessFlags_id1qlCQcqkGIa(@NotNull SNode __thisNode__, MyDataStream mds) {
    return ((SNode) ClassFileLoader__BehaviorDescriptor.loadAccessFlags_id1qlCQcqjTO4.invoke(__thisNode__, mds, MapSequence.<Integer, String>fromMapAndKeysArray(new HashMap<Integer, String>(), 1, 2, 4, 8, 16, 32, 64, 128, 256, 1024, 2048, 4096).withValues("public", "private", "protected", "static", "final", "synchronized", "bridge", "varargs", "native", "abstract", "strict", "synthetic")));
  }
  /*package*/ static SNode loadAccessFlags_id1qlCQcqjTO4(@NotNull SNode __thisNode__, MyDataStream mds, Map<Integer, String> mapping) {
    try {
      SNode accessFlags = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4fb665L, "me.tomassetti.bytecode.structure.AccessFlags")));
      long value = mds.readInt2AsLong();

      for (IMapping<Integer, String> m : MapSequence.fromMap(mapping)) {
        if ((value & m.key()) > 0) {
          SNode holder = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a498b94L, "me.tomassetti.bytecode.structure.AccessFlagHolder")));
          SPropertyOperations.set(holder, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a498b94L, 0x1695a3631a498b95L, "flag"), m.value());
          ListSequence.fromList(SLinkOperations.getChildren(accessFlags, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4fb665L, 0x1695a3631a4fb668L, "flags"))).addElement(holder);
        }
      }
      return accessFlags;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode loadMethodInfo_id1qlCQcqjIRa(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode methodInfo = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, "me.tomassetti.bytecode.structure.MethodInfo")));
      SLinkOperations.setTarget(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a4ea153L, "accessFlags"), ClassFileLoader__BehaviorDescriptor.loadMethodAccessFlags_id1qlCQcqkGIa.invoke(__thisNode__, mds));
      SLinkOperations.setTarget(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a4ea158L, "nameIndex"), mds.readInt2AsNode());
      System.out.println("Method name " + (long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(SLinkOperations.getTarget(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a4ea158L, "nameIndex"))));
      SLinkOperations.setTarget(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a4ea155L, "descriptorIndex"), mds.readInt2AsNode());
      long attributesCount = mds.readInt2AsLong();
      System.out.println("Method att count " + attributesCount);

      for (int i = 0; i < attributesCount; i++) {
        System.out.println("Reading method attribute " + i + " of " + attributesCount);

        ListSequence.fromList(SLinkOperations.getChildren(methodInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a4ea152L, 0x1695a3631a525217L, "attributes"))).addElement(ClassFileLoader__BehaviorDescriptor.loadAttributeInfo_id1qlCQcqktGl.invoke(__thisNode__, mds));
      }

      return methodInfo;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode getConstantPoolElement_idr0PjdDds1G(@NotNull SNode __thisNode__, SNode index) {
    int indexFromZero = ((int) ((long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(index) - 1));
    if (indexFromZero < 0) {
      throw new RuntimeException("Invalid index " + indexFromZero);
    }
    if (indexFromZero >= ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).count()) {
      throw new RuntimeException("Invalid index " + indexFromZero);
    }
    return ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(__thisNode__, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a40c7ecL, 0x1695a3631a40c7edL, "classFile")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x40880d8921831cd4L, 0x1695a3631a449987L, "constantPool"))).getElement(indexFromZero);
  }
  /*package*/ static SNode loadAttributeInfo_id1qlCQcqktGl(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode attributeInfo = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, "me.tomassetti.bytecode.structure.AttributeInfo")));
      SLinkOperations.setTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a52669cL, "nameIndex"), mds.readInt2AsNode());
      SNode nameNode = SNodeOperations.cast(ClassFileLoader__BehaviorDescriptor.getConstantPoolElement_idr0PjdDds1G.invoke(__thisNode__, SLinkOperations.getTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a52669cL, "nameIndex"))), MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, "me.tomassetti.bytecode.structure.ConstantPoolUtf8"));
      System.out.println("ATTRIBUTE NAME " + SPropertyOperations.getString(nameNode, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, 0x1695a3631a47083aL, "value")));
      if (SPropertyOperations.getString(nameNode, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a43d9c7L, 0x1695a3631a47083aL, "value")).equals("Code")) {
        SLinkOperations.setTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a534cd2L, "data"), ClassFileLoader__BehaviorDescriptor.readCode_idr0PjdDe5KL.invoke(__thisNode__, mds));
      } else {
        SLinkOperations.setTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a534cd2L, "data"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336931d741L, "me.tomassetti.bytecode.structure.RawAttributeInfoData"))));
        SLinkOperations.setTarget(SNodeOperations.cast(SLinkOperations.getTarget(attributeInfo, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a51ca20L, 0x1695a3631a534cd2L, "data")), MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336931d741L, "me.tomassetti.bytecode.structure.RawAttributeInfoData")), MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336931d741L, 0x6c0d5336931d742L, "bytes"), ClassFileLoader__BehaviorDescriptor.readArray_id1qlCQcqkYgS.invoke(__thisNode__, mds));
      }
      System.out.println("DONE");
      return attributeInfo;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode readCode_idr0PjdDe5KL(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      BigInteger length = mds.readInt4AsBigInteger();
      SNode data = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, "me.tomassetti.bytecode.structure.CodeAttributeInfoData")));
      SLinkOperations.setTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382672L, "maxStack"), mds.readInt2AsNode());
      SLinkOperations.setTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382670L, "maxLocals"), mds.readInt2AsNode());
      System.out.println("maxStack " + (long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(SLinkOperations.getTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382672L, "maxStack"))));
      System.out.println("maxLocals " + (long) Unsigned2Bytes__BehaviorDescriptor.toLong_id1qlCQcqjgik.invoke(SLinkOperations.getTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382670L, "maxLocals"))));

      ListSequence.fromList(SLinkOperations.getChildren(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382676L, "instructions"))).addSequence(ListSequence.fromList(ClassFileLoader__BehaviorDescriptor.readCodeArray_idr0PjdDggI6.invoke(__thisNode__, mds)));
      SLinkOperations.setTarget(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d5336938267aL, "exceptionTable"), SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382685L, "me.tomassetti.bytecode.structure.ExceptionTable"))));
      long excTableLength = mds.readInt2AsLong();
      if (excTableLength > 0) {
        throw new RuntimeException("Exception table not supported");
      }
      long attrCount = mds.readInt2AsLong();
      for (long i = 0; i < attrCount; i++) {
        ListSequence.fromList(SLinkOperations.getChildren(data, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369382668L, 0x6c0d53369382691L, "attributeInfos"))).addElement(ClassFileLoader__BehaviorDescriptor.loadAttributeInfo_id1qlCQcqktGl.invoke(__thisNode__, mds));
      }

      return data;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static List<SNode> readCodeArray_idr0PjdDggI6(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode array = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, "me.tomassetti.bytecode.structure.Unsigned1BytesArray")));
      List<SNode> instructions = new ArrayList<SNode>();
      BigInteger length = mds.readInt4AsBigInteger();
      System.out.println("Array length " + length);
      for (BigInteger i = BigInteger.ONE; i.compareTo(length) <= 0;) {
        int code = mds.readInt1AsInt();
        i = i.add(BigInteger.ONE);
        switch (code) {
          case 18:
            ListSequence.fromList(instructions).addElement(createLDC_pw462t_a0a0a0a0c0e0a0m(SNodeOperations.cast(HUtil.copyIfNecessary(mds.readInt1AsNode()), MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdcL, "me.tomassetti.bytecode.structure.Unsigned1Byte"))));
            i = i.add(BigInteger.ONE);
            break;
          case 42:
            ListSequence.fromList(instructions).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336943c8f7L, "me.tomassetti.bytecode.structure.AALOAD_0"))));
            break;
          case 43:
            ListSequence.fromList(instructions).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336943c8f8L, "me.tomassetti.bytecode.structure.AALOAD_1"))));
            break;
          case 44:
            ListSequence.fromList(instructions).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336943c8faL, "me.tomassetti.bytecode.structure.AALOAD_2"))));
            break;
          case 45:
            ListSequence.fromList(instructions).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336943c8f9L, "me.tomassetti.bytecode.structure.AALOAD_3"))));
            break;
          case 176:
            ListSequence.fromList(instructions).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369489e94L, "me.tomassetti.bytecode.structure.AReturn"))));
            break;
          case 177:
            ListSequence.fromList(instructions).addElement(SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336947a20bL, "me.tomassetti.bytecode.structure.Return"))));
            break;
          case 183:
            ListSequence.fromList(instructions).addElement(createInvokeSpecial_pw462t_a0a0a0a7c0e0a0m(SNodeOperations.cast(HUtil.copyIfNecessary(mds.readInt2AsNode()), MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a47ef12L, "me.tomassetti.bytecode.structure.Unsigned2Bytes"))));
            i = i.add(BigInteger.ONE);
            i = i.add(BigInteger.ONE);
            break;
          default:
            throw new RuntimeException("Unknown instruction " + code);
        }

      }
      return instructions;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode readArray_idr0PjdDgi$s(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode array = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, "me.tomassetti.bytecode.structure.Unsigned1BytesArray")));
      BigInteger length = mds.readInt4AsBigInteger();
      System.out.println("Array length " + length);
      for (BigInteger i = BigInteger.ONE; i.compareTo(length) <= 0; i = i.add(BigInteger.ONE)) {
        ListSequence.fromList(SLinkOperations.getChildren(array, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, 0x1695a3631a534ce0L, "elements"))).addElement(mds.readInt1AsNode());
      }
      return array;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  /*package*/ static SNode readArray_id1qlCQcqkYgS(@NotNull SNode __thisNode__, MyDataStream mds) {
    try {
      SNode array = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, "me.tomassetti.bytecode.structure.Unsigned1BytesArray")));
      BigInteger length = mds.readInt4AsBigInteger();
      System.out.println("Array length " + length);
      for (BigInteger i = BigInteger.ONE; i.compareTo(length) <= 0; i = i.add(BigInteger.ONE)) {
        ListSequence.fromList(SLinkOperations.getChildren(array, MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdeL, 0x1695a3631a534ce0L, "elements"))).addElement(mds.readInt1AsNode());
      }
      return array;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  /*package*/ ClassFileLoader__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((String) asHexadecimal_id1qlCQcqguFh(node, ((byte) (Byte) parameters[0])));
      case 1:
        return (T) ((Long) toInteger_id1qlCQcqgEyg(node, (byte[]) parameters[0]));
      case 2:
        return (T) ((Long) pow_id1qlCQcqgIKn(node, ((int) (Integer) parameters[0]), ((int) (Integer) parameters[1])));
      case 3:
        return (T) ((Long) toInteger_id1qlCQcqgEPh(node, (byte[]) parameters[0], ((int) (Integer) parameters[1])));
      case 4:
        load_id1qlCQcqgn_R(node);
        return null;
      case 5:
        return (T) ((SNode) loadClassAccessFlags_id1qlCQcqkEDC(node, (MyDataStream) parameters[0]));
      case 6:
        return (T) ((SNode) loadMethodAccessFlags_id1qlCQcqkGIa(node, (MyDataStream) parameters[0]));
      case 7:
        return (T) ((SNode) loadAccessFlags_id1qlCQcqjTO4(node, (MyDataStream) parameters[0], (Map<Integer, String>) parameters[1]));
      case 8:
        return (T) ((SNode) loadMethodInfo_id1qlCQcqjIRa(node, (MyDataStream) parameters[0]));
      case 9:
        return (T) ((SNode) getConstantPoolElement_idr0PjdDds1G(node, (SNode) parameters[0]));
      case 10:
        return (T) ((SNode) loadAttributeInfo_id1qlCQcqktGl(node, (MyDataStream) parameters[0]));
      case 11:
        return (T) ((SNode) readCode_idr0PjdDe5KL(node, (MyDataStream) parameters[0]));
      case 12:
        return (T) ((List<SNode>) readCodeArray_idr0PjdDggI6(node, (MyDataStream) parameters[0]));
      case 13:
        return (T) ((SNode) readArray_idr0PjdDgi$s(node, (MyDataStream) parameters[0]));
      case 14:
        return (T) ((SNode) readArray_id1qlCQcqkYgS(node, (MyDataStream) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
  private static SNode createLDC_pw462t_a0a0a0a0c0e0a0m(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369480935L, "me.tomassetti.bytecode.structure.LDC"), null, null, false);
    if (p0 != null) {
      n1.addChild(MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d53369480935L, 0x6c0d53369480936L, "index"), (SNode) p0);
    }
    return n1;
  }
  private static SNode createInvokeSpecial_pw462t_a0a0a0a7c0e0a0m(Object p0) {
    PersistenceFacade facade = PersistenceFacade.getInstance();
    SNode n1 = SModelUtil_new.instantiateConceptDeclaration(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336946de49L, "me.tomassetti.bytecode.structure.InvokeSpecial"), null, null, false);
    if (p0 != null) {
      n1.addChild(MetaAdapterFactory.getContainmentLink(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x6c0d5336946de49L, 0x6c0d5336946de4aL, "index"), (SNode) p0);
    }
    return n1;
  }
}
