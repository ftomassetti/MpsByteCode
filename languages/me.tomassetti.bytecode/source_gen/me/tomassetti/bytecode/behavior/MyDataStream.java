package me.tomassetti.bytecode.behavior;

/*Generated by MPS */

import java.io.DataInputStream;
import java.math.BigInteger;
import org.jetbrains.mps.openapi.model.SNode;
import java.io.IOException;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.nio.charset.StandardCharsets;

public class MyDataStream {

  private DataInputStream dis;

  public MyDataStream(DataInputStream dis) {
    this.dis = dis;
  }

  public static String asHexadecimal(byte b) {
    int val = b + 256;
    int high = val / 16;
    int low = val % 16;
    return Integer.toHexString(high) + Integer.toHexString(low);
  }

  public static long toInteger(byte[] b) {
    return toInteger(b, 0);
  }

  public static BigInteger toBigInteger(byte[] b) {
    return toBigInteger(b, 0);
  }

  private static long pow(int base, int exp) {
    if (exp < 0) {
      throw new RuntimeException("" + exp);
    }
    if (exp == 1) {
      return base;
    }
    if (exp == 0) {
      return 1;
    }

    System.out.println(exp);
    return base * pow(base, exp - 1);
  }

  private static short asUnsigned(byte b) {
    if (b < 0) {
      return (short) (256 + b);
    } else {
      return b;
    }
  }

  private static long toInteger(byte[] b, int index) {
    int exp = b.length - index - 1;
    if (exp == 0) {
      return asUnsigned(b[index]);
    } else {
      return pow(256, exp) * asUnsigned(b[index]) + toInteger(b, index + 1);
    }
  }
  private static BigInteger toBigInteger(byte[] b, int index) {
    int exp = b.length - index - 1;
    if (exp == 0) {
      return BigInteger.valueOf(b[index]);
    } else {
      return BigInteger.valueOf(256).pow(exp).multiply(BigInteger.valueOf(b[index])).add(toBigInteger(b, index + 1));
    }
  }

  public SNode readInt2AsNode() throws IOException {
    try {
      byte[] u2 = new byte[2];
      dis.readFully(u2);
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a47ef12L, "me.tomassetti.bytecode.structure.Unsigned2Bytes")));
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a47ef12L, 0x1695a3631a47ef13L, "value"), Long.toString(toInteger(u2)));
      return node;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  public SNode readInt1AsNode() throws IOException {
    try {
      byte[] u1 = new byte[1];
      dis.readFully(u1);
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdcL, "me.tomassetti.bytecode.structure.Unsigned1Byte")));
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534cdcL, 0x1695a3631a534cddL, "value"), Long.toString(toInteger(u1)));
      return node;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  public int readInt1AsInt() throws IOException {
    try {
      byte[] u1 = new byte[1];
      dis.readFully(u1);
      return (int) toInteger(u1);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }
  public BigInteger readInt4AsBigInteger() throws IOException {
    try {
      byte[] u4 = new byte[4];
      dis.readFully(u4);
      return toBigInteger(u4);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public SNode readInt4AsNode() throws IOException {
    try {
      byte[] u4 = new byte[4];
      dis.readFully(u4);
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534bf3L, "me.tomassetti.bytecode.structure.Unsigned4Bytes")));
      SPropertyOperations.set(node, MetaAdapterFactory.getProperty(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a534bf3L, 0x1695a3631a534bf4L, "value"), toBigInteger(u4).toString());
      return node;
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public long readInt2AsLong() throws IOException {
    try {
      byte[] u2 = new byte[2];
      dis.readFully(u2);
      SNode node = SConceptOperations.createNewNode(SNodeOperations.asInstanceConcept(MetaAdapterFactory.getConcept(0x1392eb99581d482bL, 0xaa2819e40eaffbe2L, 0x1695a3631a47ef12L, "me.tomassetti.bytecode.structure.Unsigned2Bytes")));
      return toInteger(u2);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

  public String readString(int length) {
    try {
      byte[] bytes = new byte[length];
      dis.readFully(bytes);
      return new String(bytes, StandardCharsets.UTF_8);
    } catch (IOException e) {
      throw new RuntimeException(e);
    }
  }

}
